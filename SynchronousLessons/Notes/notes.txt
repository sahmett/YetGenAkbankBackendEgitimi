
/**
 * Guid Tipi : Eşsiz bir değer oluşturur. Bu sayede aynı değeri oluşturmaz. Özellikle tecrübeli yazılımcılar tarafından kullanılır. ID için int kullanılmaz. Dünyada eşsiz olarak yer alır sadece projede değil.
 * int kullanırsak daha hızlı ve kolay olur. Guid kullanırsak daha yavaş ve zor olur. Ayrıca int daha az yer kaplar. Guid daha fazla yer kaplar.
 * TC, Posta Kodu, Telefon Numarası gibi değerlerde String kullanılır. Çünkü bu değerler ülkeden ülkeye değişir. String kullanırsak daha kolay olur.
 * Student classı içinde ID vereceksek StudentID yerine ID yazılır. Çünkü ID zaten Student classının bir parçasıdır.
 * Enum : Birbirine benzeyen değerleri gruplamak için kullanılır. Örneğin; Cinsiyet, Durum, Renk gibi. Enum kullanacağın yerde String kullanma
 * DateTimeOffset C# ve MSSQL tarafında kullanılır. Farkı : UTC değerini de tutar. Saat farkını da tutar. 
 * Student : PersonBase => Burada Student classı PersonBase classından türetilir. PersonBase classı içerisindeki alanlar burada da kullanılabilir.
*/

/**
 * Entity Base'i veritabanına göndereceğimiz her şeyde kullanırız.
 * Mesela hepsinde Guid kullanmak istemiyorsam verdiğim veri tipine göre değiştirebilirim.
 * class EntityBase<T> şeklinde yazdığımızda T'ye verdiğimiz veri tipine göre değişir.
 * EntityBase de Base temel anlamına gelir
 */

/**
 * Abstract base newlenemez.
 * protected ile erişim belirleyicisi kullanıldığında sadece kalıtım yoluyla erişilebilir. 
 * 
 * Virtual metotlar override edilebilir.
 * Virtual metotlar override edilmezse base sınıfın metodu çalışır.
 * virtual içi dolu gelir abstract bizim doldurmamız gerekiyor .
 */


/**
 * Implicit : Veri kaybı olmaz.
 * Explicit : Veri kaybı olabilir.
 */

/**
 *Proje tek dil olmalı. Türkçe ya İngilizce olsun. Ama tavsiye olarak İngilizce yapmanı öneririm.
 *.ForEach() : Bir liste içerisindeki her bir eleman için bir işlem yapmak istiyorsan kullanılır. Tek satırda Linq ile yapılabilir.
 * OOP'de kendini asla tekrar etme ortak alanlar varsa onları grupla. Örneğin; Student ve Teacher classlarında ortak alanlar var. Person classında topladık.
 * Polymorphism : Bir nesnenin birden fazla formu olabilir. Örneğin; Person classı içerisindeki FirstName ve LastName alanları Student ve Teacher classlarında da var. Bu alanlar Person classının bir formudur.
 */

/** 
 * return ediyorsak kod aşağı doğru devam etmez. Bu yüzden break kullanmaya gerek yok. */

/**
 * File.ReadAllText() : Bir dosyanın içeriğini okumak için kullanılır.
 * .Split() : Bu metot bir string'i parçalamak için kullanılır. İçerisine verdiğimiz parametreye göre parçalar.
 * StringSplitOptions.RemoveEmptyEntries : Bu parametre ile boşlukları kaldırır.
 */
